{"version":3,"sources":["view/register.js"],"names":["Wrapper","styled","div","Title","h1","Component","AuthStore","useStore","history","useHistory","name","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","console","log","setUsername","username","setPassword","password","register","then","push","catch","e","onFinishFailed","errorInfo","autoComplete","Item","label","rules","required","message","validator","rule","value","test","Promise","reject","lenth","resolve","min","max","Password","offset","type","htmlType"],"mappings":"uLAMMA,EAAUC,IAAOC,IAAV,mKAOPC,EAAQF,IAAOG,GAAV,2EA+IIC,UA1IG,WAAO,IACdC,EAAaC,cAAbD,UACDE,EAAUC,cAkChB,OACI,eAACT,EAAD,WACI,cAACG,EAAD,2BAIA,eAAC,IAAD,CACIO,KAAK,QACLC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,cAAe,CACXC,UAAU,GAEdC,SAhDK,SAAAC,GACbC,QAAQC,IAAI,YAAaF,GACzBX,EAAUc,YAAYH,EAAOI,UAC7Bf,EAAUgB,YAAYL,EAAOM,UAC7BjB,EAAUkB,WACLC,MAAK,WACFP,QAAQC,IAAI,2DACZX,EAAQkB,KAAK,QACdC,OAAM,SAACC,GACVV,QAAQC,IAAIS,GACZV,QAAQC,IAAI,gCAuCRU,eAnCW,SAACC,GACpBZ,QAAQC,IAAI,UAAWW,IAmCfC,aAAa,MAbjB,UAeI,cAAC,IAAKC,KAAN,CACIC,MAAM,qBACNvB,KAAK,WACLwB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,yCACV,CACCC,UA1CC,SAACC,EAAMC,GAC5B,MAAI,KAAKC,KAAKD,GAAeE,QAAQC,OAAO,gEACxCH,EAAMI,MAAQ,GAAKJ,EAAMI,MAAQ,GAAWF,QAAQC,OAAO,wDACxDD,QAAQG,aA+BP,SAYI,cAAC,IAAD,MAGJ,cAAC,IAAKZ,KAAN,CAEIC,MAAM,eACNvB,KAAK,WACLwB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,wCACV,CACCS,IAAK,EACLT,QAAS,mCAEV,CACCU,IAAK,GACLV,QAAS,qCAdrB,SAkBI,cAAC,IAAMW,SAAP,MAiCJ,cAAC,IAAKf,KAAN,CACInB,WAAY,CACRmC,OAAQ,GACRpC,KAAM,IAHd,SAMI,cAAC,IAAD,CAAQqC,KAAK,UAAUC,SAAS,SAAhC","file":"static/js/17.7763a1dc.chunk.js","sourcesContent":["import {Form, Input, Button, message} from 'antd';\nimport React from 'react';\nimport styled from 'styled-components';\nimport {useStore} from '../store';  // 引入useStore，user是对Auth的进一步封装，通过他，我们的V层，可以与M层交互\nimport {useHistory} from 'react-router-dom';\n\nconst Wrapper = styled.div`\n  max-width: 600px;\n  margin: 30px auto;\n  box-shadow: 2px 2px 2px 3px rgba(0, 0, 0, 0.3);\n  border-radius: 6px;\n  padding: 20px;\n`\nconst Title = styled.h1`\n  text-align: center;\n  margin-bottom: 25px;\n`\n\nconst Component = () => {\n    const {AuthStore} = useStore(); // 我怀疑userStore是以一个构造函数，而不用new 用{AuthStore}\n    const history = useHistory();\n\n\n    const onFinish = values => {\n        console.log('Success2:', values);\n        AuthStore.setUsername(values.username);\n        AuthStore.setPassword(values.password);\n        AuthStore.register()\n            .then(() => {\n                console.log('注册成功,跳转到首页')\n                history.push('/')\n            }).catch((e) => {\n            console.log(e)\n            console.log('注册失败')\n        })\n    };\n\n    const onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const validateUsername = (rule, value) => { // 注意，正则表达式的W是大写的！\n        if (/\\W/.test(value)) return Promise.reject('只能是字母数字下划线');\n        if (value.lenth < 4 || value.lenth > 10) return Promise.reject('字符长度只能是4-10位');\n        return Promise.resolve()\n    };\n\n    //  const validateConfirm = ({getFieldValue}) => ({\n    //     validator(rule,value){\n    //        if(getFieldValue('password')===value) return Promise.resolve\n    //        return Promise.reject('两次密码不一致')\n    //    }\n    //  });\n\n    return (\n        <Wrapper>\n            <Title>\n                注册\n            </Title>\n\n            <Form\n                name=\"basic\"\n                labelCol={{\n                    span: 4,\n                }}\n                wrapperCol={{\n                    span: 20,\n                }}\n                initialValues={{\n                    remember: true,\n                }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n                <Form.Item\n                    label=\"用户名\"\n                    name=\"username\"\n                    rules={[\n                        {\n                            required: true,\n                            message: '请输入用户名!',\n                        }, {\n                            validator: validateUsername\n                        }\n                    ]}\n                >\n                    <Input/>\n                </Form.Item>\n\n                <Form.Item\n\n                    label=\"密码\"\n                    name=\"password\"\n                    rules={[\n                        {\n                            required: true,\n                            message: '请输入密码！',\n                        }, {\n                            min: 4,\n                            message: '最小4个字符'\n\n                        }, {\n                            max: 10,\n                            message: '最大10个字符'\n                        }\n                    ]}\n                >\n                    <Input.Password/>\n                </Form.Item>\n\n                {/* 确认密码  */}\n\n                {/* 不知道为什么，加了confirm就不行，我也不懂为什么 */}\n\n                {/* <Form.Item\n        label=\"确认密码\"\n        name=\"confirm\"\n        rules={[\n          {\n            required: true,\n            message: '请确认密码！',\n          },\n          validateConfirm \n        ]}\n      >\n        <Input.Password />\n      </Form.Item> */}\n\n                {/* 没有用的cheackbox栏 */}\n                {/* <Form.Item\n        name=\"remember\"\n        valuePropName=\"checked\"\n        wrapperCol={{\n          offset: 8,\n          span: 16,\n        }}\n      >\n        <Checkbox>Remember me</Checkbox>\n      </Form.Item> */}\n\n                <Form.Item\n                    wrapperCol={{\n                        offset: 10,\n                        span: 30,\n                    }}\n                >\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        提交\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Wrapper>\n    );\n};\n\nexport default Component;"],"sourceRoot":""}